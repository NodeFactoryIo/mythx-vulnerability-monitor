import Analysis, { status } from "../Models/Analysis";
import Contract from "../Models/Contract";
import User from "../Models/User";
import ContractService from "../Services/Contract";
import Auth from "../Services/Auth";

/**
 * We monitor analyses for a new vulnerabilities on a regular period.
 */
export function findExpiredAnalyses() {
    const daysPeriod = parseInt(process.env.MONITOR_PERIOD_DAYS) || 30;

    Analysis.findAll({ where: {
        status: status.FINISHED,
        updatedAt: { [Analysis.sequelize.Op.lt] : new Date(new Date() as any - daysPeriod * 24 * 60 * 60 * 1000) }
    }})
        .then((analyses => {
            analyses.forEach(async(analysis) => {
                try {
                    const contract = await Contract.findById(analysis.contractId);
                    const access = await Auth.getToken(contract.userId);
                    await ContractService.submitForAnalysis(access, contract);
                } catch (e) {
                    console.error(`Error on checking analysis ${analysis.id}... ${e.message}`);
                }
            });
        }))
        .catch((e) => console.error(`Error on submitting contract for analysis... , ${e.message}`));
}
