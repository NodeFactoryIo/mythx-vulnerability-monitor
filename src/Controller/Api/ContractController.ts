import { Request, Response } from "express";
import { body, validationResult } from 'express-validator/check';
import Contract from "../../Services/Contract";
import MythX from "../../Services/MythX";
import User from '../../Models/User';

export default class ContractController {

    public static validationSubmitContract = [
        body('bytecode').exists().trim(),
        body('access').exists().trim(),
        // body('source').custom((value, { req }) => {
        //     if (value && !req.body.name) {
        //         throw new Error('Contract name is required with source');
        //     }
        // }),
    ];

    public static async submitContract(req: Request, res: Response): Promise<Response> {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        try {
            const { bytecode, name, source, access, address } = req.body;
            const user = await User.findByAccess(access);

            if (!user) {
                return res.status(401).send('Not logged in');
            }

            const data = {
                userId: user.id,
                bytecode,
                name,
                source,
                address,
            };
            const response = await Contract.submitForAnalysis(access, data);

            res.status(200).send(response);
        } catch (error) {
            console.error(error);
            return res.status(500).send(error);
        }

    }

}
