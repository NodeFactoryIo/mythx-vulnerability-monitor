import { Request, Response } from "express";
import { body, validationResult } from 'express-validator/check';
import Contract from "../../Services/Contract";
import MythX from "../../Services/MythX";

export default class ContractController {

    public static validationSubmitContract = [
        body('bytecode').exists().trim(),
        body('access').exists().trim(),
        // body('source').custom((value, { req }) => {
        //     if (value && !req.body.name) {
        //         throw new Error('Contract name is required with source');
        //     }
        // }),
    ];

    public static async submitContract(req: Request, res: Response): Promise<Response> {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        try {
            const { bytecode, name, source, access } = req.body;

            if (source) {
                // Make full analysis
                const compiled = await Contract.compile(name, source);
                // Check if bytecode matches?
                const response = await MythX.submitContractForFullAnalysis(compiled, source, name, access);
                res.status(200).send(response);
            } else {
                // Send bytecode only for analysis
                const response = await MythX.submitContractForBytecodeAnalysis(bytecode, access);
                res.status(200).send(response);
            }
        } catch (error) {
            console.error(error);
            return res.status(500).send(error);
        }

    }

}
