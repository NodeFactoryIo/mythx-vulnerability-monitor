import jwtDecode from 'jwt-decode';
import User from '../Models/User';
import MythX from './MythX';

export default class Auth {
    async saveTokens(email: string, accessToken: string, refreshToken: string) {

    }

    refreshToken(email: string) {
        return new Promise(async(resolve, reject) => {
            try {
                const user = await User.findByPk(email);
                const token = jwtDecode(user.accessToken);
                const currentTime = new Date().getTime() / 1000;
                // Refresh only if less than 2 minutes left to live
                if (token.exp - currentTime <= 2 * 60) {
                    const response = await MythX.refreshTokenRequest(user.accessToken, user.refreshToken);
                    await this.saveTokens(email, response.access, response.refresh);
                    resolve();
                }
            } catch (error) {
                reject(error.message);
            }
        });
    }
}