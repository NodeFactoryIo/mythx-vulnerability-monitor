import { makePostRequest, makeGetRequest } from './requests';

export class MythX {
    public apiUrl: string;

    constructor() {
        this.apiUrl = process.env.MYTHX_API_URL || 'https://api.mythx.io/v1';
    }

    public refreshTokenRequest(access: string, refresh: string): Promise<{ access: string, refresh: string }> {
        const url = `${this.apiUrl}/auth/refresh`;
        const options = {
            form: {
                jwtTokens: {access, refresh},
            },
        };

        return makePostRequest(url, options) as Promise<{ access: string, refresh: string }>;
    }

    public submitContractForFullAnalysis(compilationOutput, source, contractName, access) {
        const fullName = contractName.includes('.sol') ? contractName : `${contractName}.sol`;
        const url = `${this.apiUrl}/analyses`;
        const data = {
            ...compilationOutput,
            analysisMode : "quick",
            sources: {
                [fullName] : {
                    source: JSON.parse(source),
                }
            },
            mainSource: fullName,
        };

        const options = {
            headers: {
                'Authorization': `Bearer ${access}`,
            },
            form: { data, clientToolName: 'vulnerability-monitor' }
        };

        return makePostRequest(url, options);
    }

    public submitContractForBytecodeAnalysis(bytecode, access) {
        const url = `${this.apiUrl}/analyses`;
        const data = {
            bytecode,
        };

        const options = {
            headers: {
                'Authorization': `Bearer ${access}`,
            },
            form: { data }
        };

        return makePostRequest(url, options);
    }

    public getAnalysisStatus(uuid : string, access: string) : any {
        const url = `${this.apiUrl}/analyses/${uuid}`;

        return makeGetRequest(url, access);
    }

    public getAnalysisResult(uuid : string, access: string) : any {
        const url = `${this.apiUrl}/analyses/${uuid}/issues`;

        return makeGetRequest(url, access);
    }
}

export default new MythX();
