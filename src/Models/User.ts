import {Column, DataType, Model, Table, HasMany, PrimaryKey, CreatedAt, UpdatedAt} from "sequelize-typescript";
import Contract from './Contract';
import Analysis from './Analysis';

@Table({
    timestamps: true,
    tableName: "Users",
})
export default class User extends Model<User> {
    @PrimaryKey
    @Column({
        type: DataType.INTEGER,
        autoIncrement: true,
    })
    public id: number;

    @Column({
        type: DataType.STRING,
        unique: true,
        validate: { isEmail: true }
    })
    public email: string;

    @Column({
        type: DataType.TEXT,
    })
    public accessToken: string;

    @Column({
        type: DataType.TEXT,
    })
    public refreshToken: string;

    @CreatedAt
    createdAt: Date;

    @UpdatedAt
    updatedAt: Date;

    @HasMany(() => Contract)
    contracts: Contract[];

    public static findByAccess(access : string) : Promise<User> {
        return User.findOne({
            where: { accessToken: access }
        }) as any;
    }

    public static findByEmail(email : string) : Promise<User> {
        return User.findOne({
            where: { email },
            // include: [Contract] TODO: This is throwing weird error
        }) as any;
    }

    public static async getAllUserAnalyses(userId : number) {
        const result = await Contract.sequelize.query(`SELECT name, bytecode, source, uuid, report FROM "Contracts" AS "Contracts"` +
            ` INNER JOIN "Analyses" AS "Analyses" ON "contractId" = "Contracts"."id"` +
            ` WHERE "Contracts"."userId" = ${userId}`);

        return result[0];
    }
}
