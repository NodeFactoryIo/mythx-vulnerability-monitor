import 'whatwg-fetch';

/**
 * Parses the JSON returned by a network request
 *
 * @param  {object} response A response from a network request
 *
 * @return {object}          The parsed JSON from the request
 */
function parseJSON(response) {
  if (response.status === 204 || response.status === 205) {
    return null;
  }
  return response.json();
}

/**
 * Checks if a network request came back fine, and throws an error if not
 *
 * @param  {object} response   A response from a network request
 *
 * @return {object|undefined} Returns either the response, or throws an error
 */
async function checkStatus(response) {
  if (response.status >= 200 && response.status < 300) {
    return response;
  }

  const error = new Error(response.statusText);
  error.response = await response.json();
  throw error;
}

const makeRequest = (url, config) => (
  fetch(url, config)
    .then(checkStatus)
    .then(parseJSON)
);

export const postRequest = (url, config = {}) => {
  config.headers = new Headers(config.headers);
  config.headers.append('Accept', 'application/json');
  config.headers.append('Content-Type', 'application/json');
  config.method = 'post';

  config.body = JSON.stringify(config.body);

  return makeRequest(url, config);
};

/**
 * Requests a URL, returning a promise
 *
 * @param  {string} url       The URL we want to request
 * @param  {object} [options] The options we want to pass to "fetch"
 *
 * @return {object}           The response data
 */
export function getRequest(url, options = {}) {
  return makeRequest(url, options);
}
