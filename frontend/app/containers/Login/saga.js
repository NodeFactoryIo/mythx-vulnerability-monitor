import {
  call, put, takeLatest
} from 'redux-saga/effects';

import { LOGIN_ERROR, LOGIN_REQUEST, LOGIN_SUCCESS, SAVE_TOKENS_SUCCESS, SAVE_TOKENS_ERROR } from './constants';
import { postRequest } from '../../utils/request';
import { loginSuccess, loginError } from './actions';
import { MYTHX_LOGIN_URL, API_TOKENS_URL } from '../../api';

function* loginRequest(action) {
  try {
    const { ethAddress, password, email } = action;
    const body = { ethAddress, password };
    const response = yield call(postRequest, MYTHX_LOGIN_URL, { body });

    const { access, refresh } = response;
    yield put(loginSuccess(access, refresh, email));
  } catch (err) {
    yield put(loginError(err.response));
  }
}

function* saveTokens(action) {
  try {
    const { access, refresh, email } = action;
    const body = { access, refresh, email };
    const response = yield call(postRequest, API_TOKENS_URL, { body });

    yield put({ type: SAVE_TOKENS_SUCCESS, response });
  } catch (err) {
    yield put({ type: SAVE_TOKENS_ERROR, error: err.response });
  }
}

export default function* login() {
  yield takeLatest(LOGIN_REQUEST, loginRequest);
  yield takeLatest(LOGIN_SUCCESS, saveTokens);
}
