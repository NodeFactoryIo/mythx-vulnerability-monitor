import {
  put, takeLatest, call, select, take
} from 'redux-saga/effects';
import Web3 from 'web3';
import { API_CONTRACT_URL, CONTRACT_CREATION_TX } from '../../api';
import { getRequest, postRequest } from '../../utils/request';
import { makeSelectBytecode, makeSelectToken } from '../App/selectors';
import {
  bytecodeFetchSuccess, bytecodeFetchError, submitContractSuccess, submitContractError
} from './actions';

import { SAVE_TOKENS_SUCCESS } from '../Login/constants';
import { CHANGE_STEP, BYTECODE_FETCH_REQUEST, SUBMIT_CONTRACT_REQUEST, BYTECODE_FETCH_SUCCESS } from './constants';

function* smartContractEntry() {
  yield put({ type: CHANGE_STEP, next: 1 });
}

function* bytecodeRequest(action) {
  try {
    // Fetch creation transaction
    const { contractAddress } = action;
    const url = CONTRACT_CREATION_TX.replace(':address', contractAddress);

    const response = yield call(getRequest, url);
    const { data } = response;

    // Fetch bytecode
    const txHash = data.id;
    const web3 = new Web3(Web3.givenProvider); // TODO: use Infura
    const result = yield call(web3.eth.getTransaction, txHash);
    yield put(bytecodeFetchSuccess(result.input));
  } catch (error) {
    yield put(bytecodeFetchError(error));
  }
}

function* submitContract(action) {
  const { contractAddress, source, name } = action;
  console.log(action);

  try {
    yield put({ type: BYTECODE_FETCH_REQUEST, contractAddress });
    yield take(BYTECODE_FETCH_SUCCESS);

    const bytecode = yield select(makeSelectBytecode());
    const access = yield select(makeSelectToken());

    const body = {
      bytecode,
      access,
    };
    if (source) {
      body.source = JSON.stringify(source);
      body.name = name;
    }
    const response = yield call(postRequest(API_CONTRACT_URL, { body }));
    console.log(response);
    yield put(submitContractSuccess(response));
  } catch (error) {
    yield put(submitContractError(error));
  }
}

export default function* contract() {
  yield takeLatest(SAVE_TOKENS_SUCCESS, smartContractEntry);
  yield takeLatest(BYTECODE_FETCH_REQUEST, bytecodeRequest);
  yield takeLatest(SUBMIT_CONTRACT_REQUEST, submitContract);
}
