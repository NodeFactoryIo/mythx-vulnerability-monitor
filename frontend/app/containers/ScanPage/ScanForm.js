import React from 'react';
import PropTypes from 'prop-types';
import {
  Form, Icon, Input, Button, Row, Divider, Select,
} from 'antd';

class ScanForm extends React.Component {
  handleSubmit = (e) => {
    e.preventDefault();
    const { form, onSubmitForm } = this.props;

    form.validateFields((err, values) => {
      if (!err) {
        const { contractAddress, name, source, compilerVersion } = values;
        onSubmitForm(contractAddress, name, source, compilerVersion);
      }
    });
  };

  handleSelectChange = (value) => {
    const { form } = this.props;

    form.setFieldsValue({
      compilerVersion: value,
    });
  };

  render() {
    const { form, compilerVersions } = this.props;
    const { getFieldDecorator } = form;

    return (
      <Form onSubmit={this.handleSubmit} className="contract-form">
        <Form.Item label="Contract address">
          {getFieldDecorator('contractAddress', {
            rules: [{ required: true, message: 'Please input your contract address' }],
          })(
            <Input prefix={<Icon type="key" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder="0x1234..." />
          )}
        </Form.Item>

        <Divider orientation="left" dashed>Optional</Divider>

        <p>Fill out contract source to conduct a complete analysis.</p> <br />

        <Form.Item
          label="Source code"
          extra={<b>Flatten contract code to be without imports</b>}
        >
          {getFieldDecorator('source')(
            <Input.TextArea rows={7} />
          )}
        </Form.Item>

        <Form.Item label="Contract name">
          {getFieldDecorator('name')(
            <Input prefix={<Icon type="file-text" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder="Name" />
          )}
        </Form.Item>

        <Form.Item label="Compiler version">
          {getFieldDecorator('compilerVersion')(
            <Select
              showSearch
              style={{ width: 200 }}
              optionFilterProp="children"
              onChange={this.handleSelectChange}
              filterOption={(input, option) => option.props.children.indexOf(input) >= 0}
            >
              {!!compilerVersions && compilerVersions.map((version, i) =>
                <Option key={i} value={version}>{version}</Option>)}
            </Select>,
          )}
        </Form.Item>

        <Row type="flex" justify="center">
          <Form.Item>
            <Button type="primary" htmlType="submit" className="login-form-button">
              Save
            </Button>
          </Form.Item>
        </Row>
      </Form>
    );
  }
}

ScanForm.propTypes = {
  form: PropTypes.object,
  onSubmitForm: PropTypes.func,
  compilerVersions: PropTypes.any,
};


export default Form.create({ name: 'contract' })(ScanForm);
